#!/usr/bin/env python3

from os import environ
from sys import stderr
import socket
import re

from urllib.parse import quote
from urllib.request import urlopen, Request
from pathlib import Path
import html

from argparse import ArgumentParser

parser = ArgumentParser(prog='telegram_mail', description="sendmail drop-in replacement that sends to Telegram")  # noqa: E501

parser.add_argument('-b,--bind', dest='bind', type=Path, help="Where to bind socket", required=True)  # noqa: E501
parser.add_argument('-n,--hostname', dest='hostname', type=str, help="This hostname", default=open('/etc/hostname', 'r').read().strip())  # noqa: E501
parser.add_argument('-s,--subject', dest='default_subject', type=str, help="Default subject", default="Message")  # noqa: E501
parser.add_argument('-t,--telegram-token', dest='telegram_token', type=str, help="Token telegram", default=environ.get('MAIL_TELEGRAM_TOKEN'))  # noqa: E501
parser.add_argument('-c,--telegram-chat', dest='telegram_chat', type=str, help="Chat telegram", default=environ.get('MAIL_TELEGRAM_CHAT'))  # noqa: E501

args = parser.parse_args()
assert args.telegram_token is not None and args.telegram_chat is not None, 'Unauthorized Telegram access'  # noqa: E501
env_hostname = environ.get('HOSTNAME')

urlopen(f'https://api.telegram.org/bot{args.telegram_token}/getMe')

subject = args.default_subject

server = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)

if args.bind.is_socket():
    args.bind.unlink()

server.bind(str(args.bind))
args.bind.chmod(0o777)
server.listen()


def encode_multipart_formdata(fields=dict(), files=dict()):
    from os import urandom
    import binascii
    boundary = binascii.hexlify(urandom(16)).decode('ascii')

    CRLF = "\r\n"
    L = []
    for key, value in fields.items():
        L.append('--' + boundary)
        L.append(f'Content-Disposition: form-data; name="{key}"')
        L.append('')
        L.append(str(value))

    for key, data in files.items():
        L.append('--' + boundary)
        L.append(f'Content-Disposition: form-data; name="{key}"; filename="data.txt"')  # noqa: E501
        L.append('Content-Type: text/plain')
        L.append('')
        if type(data) == str:
            L.append(data)
        elif type(data) == bytes:
            L.append(data.decode('utf-8'))
        else:
            raise Exception('File value must be either a string or bytes')
    L.append('--' + boundary + '--')
    L.append('')

    content_type = 'multipart/form-data; boundary=%s' % boundary
    return CRLF.join(L), content_type


RE_HEADER = re.compile('([a-zA-Z]*):([^$]*)')

while True:
    conn, addr = server.accept()

    is_header = True
    try:
        data = b''
        while True:
            part = conn.recv(4096)
            data += part
            if len(part) == 0:
                break
            if len(data) > 20 * 1024 * 1024:
                raise Exception("payload too big")

        lines = data.decode('utf-8').split('\n')

        message = []
        for line in lines:
            if is_header:
                match = RE_HEADER.match(line)
                if match is not None:
                    key = match.groups(0)[0]
                    value = match.groups(0)[1]
                    if key == "Subject":
                        subject = value.strip()
                else:
                    is_header = False
            else:
                message.append(line)
        joined_message = "\n".join(message)

        HEADING = f"<b>#{args.hostname}</b>: {subject}"
        if len(joined_message) > 950:
            url = f'https://api.telegram.org/bot{args.telegram_token}/sendDocument'  # noqa: E501

            summary = "\n".join(joined_message[:512].split('\n')[:-1])
            caption = f"{HEADING}\n<code>{html.escape(summary)}\n\n⚠️ WARNING: Message too big to be sent as a message. The content is in the file.</code>"  # noqa: E501
            assert len(caption) <= 1024
            body, content_type = encode_multipart_formdata(
                fields=dict(
                    chat_id=args.telegram_chat,
                    caption=caption,
                    parse_mode="HTML",
                ),
                files=dict(
                    document=joined_message
                )
            )
            assert type(body) == str, f'type of body is {str(type(body))}, not str'  # noqa: E501
            res = urlopen(Request(
                url,
                method='POST',
                data=body.encode('utf-8'),
                headers={
                    'Content-Type': content_type
                }
            ))
        else:
            final_message = f"""
{HEADING}
<pre>
{joined_message}
</pre>
            """.strip()
            url = f'https://api.telegram.org/bot{args.telegram_token}/sendMessage?chat_id={args.telegram_chat}&parse_mode=HTML&disable_web_page_preview=1&text={quote(final_message)}'  # noqa: E501
            res = urlopen(url)
        print(f"Sent '{subject}' (res: {res})", file=stderr)
        conn.send(b'OK')
    except Exception as e:
        import traceback
        print(f"Error sending '{subject}': {str(e)}", file=stderr)
        traceback.print_exc(file=stderr)
        try:
            print(e.read().decode(), file=stderr)
        except Exception:
            pass
        conn.send(str(e).encode('utf-8'))
    conn.close()
