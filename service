#!/usr/bin/env python3

import os
from sys import stderr
from time import time, sleep
import socket
import re
import traceback
import logging
from typing import Dict, Union, Optional, Any

from urllib.parse import quote
from urllib.request import urlopen, Request
from urllib.error import HTTPError
from pathlib import Path
from json import load as json_load
import html

from argparse import ArgumentParser

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    stream=stderr
)
logger = logging.getLogger('telegram_mail')

parser = ArgumentParser(prog='telegram_mail', description="sendmail drop-in replacement that sends to Telegram")  # noqa: E501

parser.add_argument('-b,--bind', dest='bind', type=Path, help="Where to bind socket", required=True)  # noqa: E501
parser.add_argument('-n,--hostname', dest='hostname', type=str, help="This hostname", default=open('/etc/hostname', 'r').read().strip())  # noqa: E501
parser.add_argument('-s,--subject', dest='default_subject', type=str, help="Default subject", default="Message")  # noqa: E501
parser.add_argument('-t,--telegram-token', dest='telegram_token', type=str, help="Token telegram", default=os.environ.get('MAIL_TELEGRAM_TOKEN'))  # noqa: E501
parser.add_argument('-c,--telegram-chat', dest='telegram_chat', type=str, help="Chat telegram", default=os.environ.get('MAIL_TELEGRAM_CHAT'))  # noqa: E501
parser.add_argument('-d,--state-dir', dest='state_dir', type=Path, help="Where to store queue data", default=Path(os.environ.get('STATE_DIRECTORY') or '.') / 'telegram_sendmail_state')  # noqa: E501
parser.add_argument('-t', '--socket-timeout', type=float, help="Socket timeout for requests", default=10.0)
parser.add_argument('--listen-timeout', dest='listen_timeout', type=float, default=10, help='Consume queue if socket is not used in more than x seconds')
parser.add_argument('--max-payload-size', dest='max_payload_size', type=int, default=20*1024*1024, help='Maximum allowed payload size in bytes')

args = parser.parse_args()
assert args.telegram_token is not None and args.telegram_chat is not None, 'Unauthorized Telegram access'  # noqa: E501

socket.setdefaulttimeout(args.socket_timeout)

env_hostname = os.environ.get('HOSTNAME')

try:
    bot_data = json_load(urlopen(f'https://api.telegram.org/bot{args.telegram_token}/getMe'))
    logger.info(f'Starting "{bot_data["result"]["first_name"]}" (@{bot_data["result"]["username"]}, id={bot_data["result"]["id"]})')

except Exception as e:
    logger.warning(f"Can't get bot information from token: {str(e)}. Your token may be invalid or your Internet may be problematic. Sent messages will be queued and sent when the Internet is available again")


server = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
server.settimeout(args.listen_timeout)

args.state_dir.mkdir(parents=True, exist_ok=True)

if args.bind.is_socket():
    args.bind.unlink()

logger.info(f"Listening on {args.bind}...")
server.bind(str(args.bind))
args.bind.chmod(0o777)
server.listen()

def encode_multipart_formdata(fields: Dict[str, Any] = None, files: Dict[str, Union[str, bytes]] = None):
    if fields is None:
        fields = {}
    if files is None:
        files = {}

    from os import urandom
    import binascii
    boundary = binascii.hexlify(urandom(16)).decode('ascii')

    CRLF = "\r\n"
    L = []
    for key, value in fields.items():
        L.append('--' + boundary)
        L.append(f'Content-Disposition: form-data; name="{key}"')
        L.append('')
        L.append(str(value))

    for key, data in files.items():
        L.append('--' + boundary)
        L.append(f'Content-Disposition: form-data; name="{key}"; filename="data.txt"')  # noqa: E501
        L.append('Content-Type: text/plain')
        L.append('')
        if isinstance(data, str):
            L.append(data)
        elif isinstance(data, bytes):
            L.append(data.decode('utf-8'))
        else:
            raise TypeError('File value must be either a string or bytes')
    L.append('--' + boundary + '--')
    L.append('')

    content_type = f'multipart/form-data; boundary={boundary}'
    return CRLF.join(L), content_type


RE_HEADER = re.compile(r'([a-zA-Z]*):([^$]*)')

def handle_send(data: bytes, timestamp: float) -> None:
    """Store message in queue for later delivery"""
    (args.state_dir / str(int(timestamp))).write_bytes(data)

def send_one_from_queue() -> bool:
    """Try to send one queued message. Returns True if a message was sent."""
    items = list(args.state_dir.iterdir())
    items.sort()
    if not items:
        return False

    for item in items:
        try:
            data = item.read_bytes()
            send_payload(data, str(item.name))
            item.unlink(missing_ok=True)
            return True
        except UnicodeDecodeError:
            logger.error("Invalid message found, removing from queue")
            item.unlink(missing_ok=True)
            continue
        except Exception as e:
            logger.error(f"Error sending message: {str(e)}")
            traceback.print_exc(file=stderr)
    return False


def send_payload(data: bytes, timestamp: str) -> None:
    """Send the message payload to Telegram"""
    lines = data.decode('utf-8').split('\n')

    is_header = True
    message = []
    subject = args.default_subject
    for line in lines:
        if is_header:
            match = RE_HEADER.match(line)
            if match is not None:
                key = match.groups(0)[0]
                value = match.groups(0)[1]
                if key == "Subject":
                    subject = value.strip()
            else:
                is_header = False
                message.append(line)
        else:
            message.append(line)
    joined_message = "\n".join(message)

    HEADING = f"<b>#{args.hostname}</b>: {html.escape(subject)}"

    # Telegram has a limit on message length
    send_as_file = len(joined_message) > 950
    while True:
        if not send_as_file:
            try:
                final_message = f"{HEADING}\n<pre>\n{html.escape(joined_message)}\n</pre>".strip()

                url = f'https://api.telegram.org/bot{args.telegram_token}/sendMessage?chat_id={args.telegram_chat}&parse_mode=HTML&disable_web_page_preview=1&text={quote(final_message)}'  # noqa: E501
                res = urlopen(url)
                logger.info(f"Sent '{subject}' (res: {res.status})")
                return
            except HTTPError as e:
                logger.error(f"HTTP error: {e}")
                traceback.print_exc()
                if e.code == 400:
                    send_as_file = True
                    continue
                raise e

        url = f'https://api.telegram.org/bot{args.telegram_token}/sendDocument'  # noqa: E501

        summary = "\n".join(joined_message[:512].split('\n')[:-1])
        caption = f"{HEADING}\n<code>{html.escape(summary)}\n\n⚠️ WARNING: Message too big to be sent as a message. The content is in the file.</code>"  # noqa: E501
        if len(caption) > 1024:
            caption = caption[:1020] + "..."

        body, content_type = encode_multipart_formdata(
            fields=dict(
                chat_id=args.telegram_chat,
                caption=caption,
                parse_mode="HTML",
            ),
            files=dict(
                document=joined_message
            )
        )
        assert isinstance(body, str), f'type of body is {str(type(body))}, not str'  # noqa: E501
        res = urlopen(Request(
            url,
            method='POST',
            data=body.encode('utf-8'),
            headers={
                'Content-Type': content_type
            }
        ))
        logger.info(f"Sent '{subject}' as document (res: {res.status})")
        return


logger.info("Ready!")

while True:
    try:
        conn, addr = server.accept()
        conn.settimeout(args.socket_timeout)

        subject = args.default_subject
        data = b''
        while True:
            part = conn.recv(4096)
            data += part
            if len(part) == 0:
                break
            if len(data) > args.max_payload_size:
                conn.send("Error: payload too big".encode('utf-8'))
                conn.close()
                logger.warning(f"Rejected message: payload size exceeded limit of {args.max_payload_size} bytes")
                break

        if len(data) <= args.max_payload_size:
            try:
                timestamp = str(int(time()))
                send_payload(data, timestamp)
                conn.send(b'OK')

                # Try to send any queued messages now that we have connectivity
                retries = 0
                while send_one_from_queue() and retries < 10:
                    sleep(0.5)
                    retries += 1

            except UnicodeDecodeError:
                conn.send(b"INVALID_DATA")
                logger.error("Failed to decode message data")
            except Exception as e:
                timestamp = int(time())
                handle_send(data, timestamp)
                error_msg = f"Error sending message, queueing: {str(e)}"
                logger.error(error_msg)

                conn.send(f"{error_msg}\n".encode('utf-8'))
                traceback.print_exc(file=stderr)
                try:
                    # This handles cases where 'e' has a read method (like some HTTP errors)
                    if hasattr(e, 'read') and callable(e.read):
                        logger.error(e.read().decode())
                except Exception:
                    pass
                conn.send(str(e).encode('utf-8'))
        conn.close()
    except socket.timeout:
        # Connection timeout - process the message queue
        retry_count = 0
        while send_one_from_queue() and retry_count < 5:
            sleep(0.5)
            retry_count += 1
    except KeyboardInterrupt:
        logger.info("Received shutdown signal, cleaning up...")
        server.close()
        break
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")
        traceback.print_exc()
        sleep(1)  # Prevent tight error loop
